{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Desktop\\\\tamil_dict\\\\e-dict\\\\src\\\\speechinput.js\";\nimport React, { Component } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Speechinput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speaking: null,\n      recognizing: null,\n      final_transcript: '',\n      recognition: null\n    }; //this.startButton = this.startButton.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      'speaking': false,\n      'recognition': new window.webkitSpeechRecognition()\n    });\n  }\n\n  startButton() {\n    const is_listening = this.state.speaking;\n\n    if (is_listening) {\n      this.state.recognition.stop();\n      return;\n    }\n\n    this.setState({\n      'final_transcript': '',\n      'recognition.lang': 'ta-IN',\n      'recognition.continuous': true,\n      'recognition.interimResults': true\n    });\n    this.state.recognition.start();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.speaking === true ? \"you are speaking...\" : \"Click button speak to speak\", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.startButton,\n        children: [\" \", this.state.speaking ? Stop : Speak, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Speechinput;","map":{"version":3,"sources":["C:/Users/shash/Desktop/tamil_dict/e-dict/src/speechinput.js"],"names":["React","Component","SpeechRecognition","useSpeechRecognition","Speechinput","constructor","props","state","speaking","recognizing","final_transcript","recognition","componentDidMount","setState","window","webkitSpeechRecognition","startButton","is_listening","stop","start","render","Stop","Speak"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,IAA4BC,oBAA5B,QAAwD,0BAAxD;;;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAChCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAG,IADF;AAETC,MAAAA,WAAW,EAAE,IAFJ;AAGTC,MAAAA,gBAAgB,EAAE,EAHT;AAITC,MAAAA,WAAW,EAAG;AAJL,KAAb,CAFe,CASf;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,CAAc;AAAC,kBAAW,KAAZ;AAAkB,qBAAc,IAAIC,MAAM,CAACC,uBAAX;AAAhC,KAAd;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,UAAMC,YAAY,GAAG,KAAKV,KAAL,CAAWC,QAAhC;;AACA,QAAIS,YAAJ,EAAkB;AACd,WAAKV,KAAL,CAAWI,WAAX,CAAuBO,IAAvB;AACA;AACD;;AACH,SAAKL,QAAL,CAAc;AAAC,0BAAmB,EAApB;AACV,0BAAmB,OADT;AAEV,gCAA0B,IAFhB;AAGV,oCAA8B;AAHpB,KAAd;AAKA,SAAKN,KAAL,CAAWI,WAAX,CAAuBQ,KAAvB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,iBACK,KAAKb,KAAL,CAAWC,QAAX,KAAyB,IAAzB,GAAgC,qBAAhC,GAAwD,6BAD7D,eAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKQ,WAApC;AAAA,wBAAmD,KAAKT,KAAL,CAAWC,QAAX,GAAsBa,IAAtB,GAA6BC,KAAhF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAMH;;AAtC+B;;AAwCpC,eAAelB,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nclass Speechinput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            speaking : null,\r\n            recognizing: null,\r\n            final_transcript: '',\r\n            recognition : null\r\n\r\n        }\r\n        //this.startButton = this.startButton.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({'speaking':false,'recognition':new window.webkitSpeechRecognition()});\r\n    }\r\n\r\n    startButton() {\r\n        const is_listening = this.state.speaking;\r\n        if (is_listening) {\r\n            this.state.recognition.stop();\r\n            return;\r\n          }\r\n        this.setState({'final_transcript':'',\r\n            'recognition.lang':'ta-IN',\r\n            'recognition.continuous' :true,\r\n            'recognition.interimResults' :true\r\n        });\r\n        this.state.recognition.start();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.state.speaking ===  true ? \"you are speaking...\" : \"Click button speak to speak\"}\r\n                <button type=\"button\" onClick={this.startButton}> {this.state.speaking ? Stop : Speak} </button>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Speechinput;"]},"metadata":{},"sourceType":"module"}