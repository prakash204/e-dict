{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Desktop\\\\tamil_dict\\\\e-dict\\\\src\\\\speechinput.js\";\nimport React, { Component } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  transcript,\n  listening,\n  resetTranscript,\n  browserSupportsSpeechRecognition\n} = useSpeechRecognition();\n\nclass Speechinput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speaking: null,\n      speechrecog: useSpeechRecognition()\n    };\n    this.buttonclicked = this.buttonclicked.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      'speaking': false\n    });\n  }\n\n  buttonclicked() {\n    const status = this.state.speaking;\n    this.setState({\n      \"speaking\": !status\n    });\n    if (status === false) SpeechRecognition.startListening();else SpeechRecognition.stopListening();\n  }\n\n  render() {\n    if (this.state.speechrecog.browserSupportsSpeechRecognition === false) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Browser not supports\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.buttonclicked,\n        children: [\" \", this.state.speaking === true ? \"Stop\" : \"Speak\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.speechrecog.transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Speechinput;","map":{"version":3,"sources":["C:/Users/shash/Desktop/tamil_dict/e-dict/src/speechinput.js"],"names":["React","Component","SpeechRecognition","useSpeechRecognition","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","Speechinput","constructor","props","state","speaking","speechrecog","buttonclicked","bind","componentDidMount","setState","status","startListening","stopListening","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,iBAAP,IAA4BC,oBAA5B,QAAwD,0BAAxD;;;AAGA,MAAM;AACFC,EAAAA,UADE;AAEFC,EAAAA,SAFE;AAGFC,EAAAA,eAHE;AAIFC,EAAAA;AAJE,IAKFJ,oBAAoB,EALxB;;AAOA,MAAMK,WAAN,SAA0BP,SAA1B,CAAoC;AAEhCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,IADD;AAETC,MAAAA,WAAW,EAAGV,oBAAoB;AAFzB,KAAb;AAIA,SAAKW,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,QAAL,CAAc;AAAC,kBAAW;AAAZ,KAAd;AACH;;AAEDH,EAAAA,aAAa,GAAG;AACZ,UAAMI,MAAM,GAAG,KAAKP,KAAL,CAAWC,QAA1B;AACA,SAAKK,QAAL,CAAc;AAAC,kBAAW,CAACC;AAAb,KAAd;AACA,QAAIA,MAAM,KAAK,KAAf,EAAsBhB,iBAAiB,CAACiB,cAAlB,GAAtB,KACKjB,iBAAiB,CAACkB,aAAlB;AACR;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKV,KAAL,CAAWE,WAAX,CAAuBN,gCAAvB,KAA4D,KAAhE,EAAuE;AACnE,0BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAEE,KAHN,MAGY,oBACJ;AAAA,8BACJ;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKO,aAApC;AAAA,wBAAqD,KAAKH,KAAL,CAAWC,QAAX,KAAwB,IAAxB,GAA+B,MAA/B,GAAwC,OAA7F;AAAA;AAAA;AAAA;AAAA;AAAA,cADI,eAEJ;AAAA,kBAAI,KAAKD,KAAL,CAAWE,WAAX,CAAuBT;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFI;AAAA,oBADI;AAMf;;AAhC+B;;AAmCpC,eAAeI,WAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n\r\nconst {\r\n    transcript,\r\n    listening,\r\n    resetTranscript,\r\n    browserSupportsSpeechRecognition\r\n} = useSpeechRecognition();\r\n\r\nclass Speechinput extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            speaking: null,\r\n            speechrecog : useSpeechRecognition(),\r\n        }\r\n        this.buttonclicked = this.buttonclicked.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({'speaking':false});\r\n    }\r\n\r\n    buttonclicked() {\r\n        const status = this.state.speaking;\r\n        this.setState({\"speaking\":!status});\r\n        if (status === false) SpeechRecognition.startListening();\r\n        else SpeechRecognition.stopListening();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.speechrecog.browserSupportsSpeechRecognition === false) {\r\n            return (\r\n            <span>Browser not supports</span>\r\n            )} else return(\r\n                <>\r\n            <button type=\"button\" onClick={this.buttonclicked}> {this.state.speaking === true ? \"Stop\" : \"Speak\"} </button>\r\n            <p>{this.state.speechrecog.transcript}</p>\r\n            </>\r\n        );\r\n    }\r\n}  \r\n\r\nexport default Speechinput;"]},"metadata":{},"sourceType":"module"}