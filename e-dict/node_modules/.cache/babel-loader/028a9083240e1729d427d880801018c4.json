{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Desktop\\\\tamil_dict\\\\e-dict\\\\src\\\\home.js\";\nimport { Component } from 'react';\nimport Keyboard from 'react-simple-keyboard'; //import \"react-simple-keyboard/build/css/index.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = input => {\n      this.setState({\n        input\n      });\n      console.log(\"Input changed\", input);\n    };\n\n    this.onKeyPress = button => {\n      console.log(\"Button pressed\", button);\n      /**\r\n       * If you want to handle the shift and caps lock buttons\r\n       */\n\n      if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\n    };\n\n    this.onChangeInput = event => {\n      const input = event.target.value;\n      this.setState({\n        input\n      });\n      this.keyboard.setInput(input);\n    };\n\n    this.handleShift = () => {\n      const layoutName = this.state.layoutName;\n      this.setState({\n        layoutName: layoutName === \"default\" ? \"shift\" : \"default\"\n      });\n    };\n\n    this.state = {\n      word: \"\",\n      input: \"\",\n      layoutName: \"default\",\n      display: {\n        'a': '\\u2714:Validate (Shift+Enter)',\n        // check mark - same action as accept\n        'accept': 'accept (Shift+Enter)',\n        'alt': 'Alt:More Characters',\n        'b': '\\u2190:Backspace',\n        // Left arrow (same as &larr;)\n        'bksp': 'Bksp:Backspace',\n        'c': '\\u2716:Escape (Esc)',\n        // big X, close - same action as cancel\n        'cancel': 'Cancel (Esc)',\n        'clear': 'C:Clear',\n        // clear num pad\n        'combo': '\\u00f6:Toggle Combo Keys',\n        'dec': '.:Decimal point',\n        // decimal point for num pad (optional), change '.' to ',' for European format\n        'e': '\\u21b5:Enter',\n        // down, then left arrow - enter symbol\n        'enter': 'Enter:Enter',\n        'lock': '\\u21ea Lock:Caps Lock',\n        // caps lock\n        's': '\\u21e7:Shift',\n        // thick hollow up arrow\n        'shift': 'Shift:Shift',\n        'sign': '\\u00b1:Sign for num pad',\n        // +/- sign for num pad\n        'space': 'Space',\n        't': '\\u21e5:Tab',\n        // right arrow to bar (used since this virtual keyboard works with one directional tabs)\n        'tab': '\\u21e5 Tab:Tab'\n      },\n      layout: {\n        'default': [\n        /* ா\tி\tீ\tு\tூ\tெ\tே\tை\tொ\tோ\tௌ\tஃ  */\n        \"\\u0BBE \\u0BBF \\u0BC0 \\u0BC1 \\u0BC2 \\u0BC6 \\u0BC7 \\u0BC8 \\u0BCA \\u0BCB \\u0BCC \\u0B83 {bksp}\",\n        /*      ஆ     ஈ      ஊ     ஐ    ஏ      ள      ற     ன     ட      ண   ச      ஞ   \\   */\n        \"{tab} \\u0b86 \\u0b88 \\u0b8a \\u0b90 \\u0b8f \\u0bb3 \\u0bb1 \\u0ba9 \\u0b9f \\u0ba3 \\u0b9a \\u0b9e\",\n        /*  அ    இ      உ     ்       எ      க      ப    ம      த      ந      ய  */\n        \"\\u0b85 \\u0b87 \\u0b89 \\u0bcd \\u0b8e \\u0b95 \\u0baa \\u0bae \\u0ba4 \\u0ba8 \\u0baf {enter}\",\n        /*         ஔ    ஒ      ஓ    வ     ங     ல      ர    , . ழ    */\n        \"{shift} \\u0b94 \\u0b93 \\u0b92 \\u0bb5 \\u0b99 \\u0bb2 \\u0bb0 , . \\u0bb4 {shift}\", \"{accept} {alt} {space} {alt} {cancel}\"],\n        'shift': [\n        /* numeric key row */\n        \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\n        /* sanskrit row */\n\n        /*     ஸ      ஷ        ஜ      ஹ           ஶ்ரீ                       க்ஷ                       */\n        \"{tab} \\u0bb8 \\u0bb7 \\u0b9c \\u0bb9 \\u0bb6 \\u0bcd \\u0bb0 \\u0bc0 \\u0b95 \\u0bcd \\u0bb7 \\[ \\] { }\",\n        /* ௹     ௺    ௸     ஃ  \\u0020 \\u0020 \\u0020 \\\" : ; \\' {enter} */\n        \"\\u0bf9 \\u0bfa \\u0bf8 \\u0b83 \\\" : ; \\' {enter}\",\n        /* ௳ ௴ ௵ ௶ ௷ */\n        \"{shift} \\u0bf3 \\u0bf4 \\u0bf5 \\u0bf6 \\u0bf7 / {shift}\", \"{accept} {alt} {space} {alt} {cancel}\"]\n      }\n    };\n    this.handleChange = this.handleChange.bind(this); //hdhjthis.handleSubmit = this.handleSubmit.bind(this);\n  }\n  /*componentDidMount() {\r\n      this.setState({field1:''});\r\n  }\r\n  handleSubmit(event) {\r\n      this.setState({'field1': event.target.elements.word.value});\r\n  }*/\n\n\n  handleChange(event) {\n    this.setState({\n      word: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"word\",\n          name: \"word\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), this.state.word !== \"\" ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Hi \", this.state.word]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 45\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: this.state.input,\n        placeholder: \"Tap on the virtual keyboard to start\",\n        onChange: this.onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n        keyboardRef: r => this.keyboard = r,\n        layout: this.state.layout,\n        layoutName: this.state.layoutName,\n        display: this.state.display,\n        onChange: this.onChange,\n        disableButtonHold: \"false\",\n        onKeyPress: this.onKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/shash/Desktop/tamil_dict/e-dict/src/home.js"],"names":["Component","Keyboard","Home","constructor","props","onChange","input","setState","console","log","onKeyPress","button","handleShift","onChangeInput","event","target","value","keyboard","setInput","layoutName","state","word","display","layout","handleChange","bind","render","r"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport Keyboard from 'react-simple-keyboard';\r\n//import \"react-simple-keyboard/build/css/index.css\";\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            word : \"\",\r\n            input : \"\",\r\n            layoutName: \"default\",\r\n            display : {\r\n                'a': '\\u2714:Validate (Shift+Enter)', // check mark - same action as accept\r\n                'accept': 'accept (Shift+Enter)',\r\n                'alt': 'Alt:More Characters',\r\n                'b': '\\u2190:Backspace',    // Left arrow (same as &larr;)\r\n                'bksp': 'Bksp:Backspace',\r\n                'c': '\\u2716:Escape (Esc)', // big X, close - same action as cancel\r\n                'cancel': 'Cancel (Esc)',\r\n                'clear': 'C:Clear',             // clear num pad\r\n                'combo': '\\u00f6:Toggle Combo Keys',\r\n                'dec': '.:Decimal point',           // decimal point for num pad (optional), change '.' to ',' for European format\r\n                'e': '\\u21b5:Enter',        // down, then left arrow - enter symbol\r\n                'enter': 'Enter:Enter',\r\n                'lock': '\\u21ea Lock:Caps Lock', // caps lock\r\n                's': '\\u21e7:Shift',        // thick hollow up arrow\r\n                'shift': 'Shift:Shift',\r\n                'sign': '\\u00b1:Sign for num pad',  // +/- sign for num pad\r\n                'space': 'Space',\r\n                't': '\\u21e5:Tab',          // right arrow to bar (used since this virtual keyboard works with one directional tabs)\r\n                'tab': '\\u21e5 Tab:Tab'\r\n                },\r\n            layout : {\r\n                'default': [\r\n                  /* ா\tி\tீ\tு\tூ\tெ\tே\tை\tொ\tோ\tௌ\tஃ  */\r\n                  \"\\u0BBE \\u0BBF \\u0BC0 \\u0BC1 \\u0BC2 \\u0BC6 \\u0BC7 \\u0BC8 \\u0BCA \\u0BCB \\u0BCC \\u0B83 {bksp}\",\r\n                  /*      ஆ     ஈ      ஊ     ஐ    ஏ      ள      ற     ன     ட      ண   ச      ஞ   \\   */\r\n                  \"{tab} \\u0b86 \\u0b88 \\u0b8a \\u0b90 \\u0b8f \\u0bb3 \\u0bb1 \\u0ba9 \\u0b9f \\u0ba3 \\u0b9a \\u0b9e\",\r\n                  /*  அ    இ      உ     ்       எ      க      ப    ம      த      ந      ய  */\r\n                  \"\\u0b85 \\u0b87 \\u0b89 \\u0bcd \\u0b8e \\u0b95 \\u0baa \\u0bae \\u0ba4 \\u0ba8 \\u0baf {enter}\",\r\n                  /*         ஔ    ஒ      ஓ    வ     ங     ல      ர    , . ழ    */\r\n                  \"{shift} \\u0b94 \\u0b93 \\u0b92 \\u0bb5 \\u0b99 \\u0bb2 \\u0bb0 , . \\u0bb4 {shift}\",\r\n                  \"{accept} {alt} {space} {alt} {cancel}\"\r\n                ],\r\n                'shift': [\r\n                    /* numeric key row */\r\n                    \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n                    /* sanskrit row */\r\n                    /*     ஸ      ஷ        ஜ      ஹ           ஶ்ரீ                       க்ஷ                       */\r\n                    \"{tab} \\u0bb8 \\u0bb7 \\u0b9c \\u0bb9 \\u0bb6 \\u0bcd \\u0bb0 \\u0bc0 \\u0b95 \\u0bcd \\u0bb7 \\[ \\] { }\",\r\n                    /* ௹     ௺    ௸     ஃ  \\u0020 \\u0020 \\u0020 \\\" : ; \\' {enter} */\r\n                    \"\\u0bf9 \\u0bfa \\u0bf8 \\u0b83 \\\" : ; \\' {enter}\",\r\n                    /* ௳ ௴ ௵ ௶ ௷ */\r\n                    \"{shift} \\u0bf3 \\u0bf4 \\u0bf5 \\u0bf6 \\u0bf7 / {shift}\",\r\n                    \"{accept} {alt} {space} {alt} {cancel}\"\r\n                ]\r\n            }\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        //hdhjthis.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /*componentDidMount() {\r\n        this.setState({field1:''});\r\n    }\r\n    handleSubmit(event) {\r\n        this.setState({'field1': event.target.elements.word.value});\r\n    }*/\r\n\r\n    onChange = input => {\r\n        this.setState({ input });\r\n        console.log(\"Input changed\", input);\r\n      };\r\n    \r\n    onKeyPress = button => {\r\n    console.log(\"Button pressed\", button);\r\n\r\n    /**\r\n     * If you want to handle the shift and caps lock buttons\r\n     */\r\n    if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\r\n    };\r\n\r\n    onChangeInput = event => {\r\n        const input = event.target.value;\r\n        this.setState({ input });\r\n        this.keyboard.setInput(input);\r\n    };\r\n\r\n    handleShift = () => {\r\n        const layoutName = this.state.layoutName;\r\n    \r\n        this.setState({\r\n          layoutName: layoutName === \"default\" ? \"shift\" : \"default\"\r\n        });\r\n      };\r\n\r\n    handleChange(event) {\r\n        this.setState({word:event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form>\r\n                <input type=\"text\" placeholder=\"word\" name = \"word\" onChange={this.handleChange}></input>\r\n                </form>\r\n                \r\n                { this.state.word !== \"\"  ? <h1>Hi {this.state.word}</h1> : \"\" }\r\n                <input\r\n                    value={this.state.input}\r\n                    placeholder={\"Tap on the virtual keyboard to start\"}\r\n                    onChange={this.onChangeInput}\r\n                />\r\n                <Keyboard\r\n                    keyboardRef={r => (this.keyboard = r)}\r\n                    layout={this.state.layout}\r\n                    layoutName={this.state.layoutName}\r\n                    display={this.state.display}\r\n                    onChange={this.onChange}\r\n                    disableButtonHold = \"false\"\r\n                    onKeyPress={this.onKeyPress}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}