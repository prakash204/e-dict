{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Desktop\\\\tamil_dict\\\\e-dict\\\\src\\\\speechinput.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar recognition = new window.webkitSpeechRecognition();\nvar final_transcript = '';\n\nclass Speechinput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speaking: null,\n      recognizing: null,\n      recognition: null\n    };\n    this.startButton = this.startButton.bind(this); //this.setConfign = this.setConfign.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n      'speaking': false\n    });\n    recognition.lang = 'ta-IN';\n    recognition.continuous = true;\n    recognition.interimResults = true;\n  }\n\n  startButton() {\n    const is_listening = this.state.speaking;\n    this.setState({\n      'speaking': !is_listening\n    });\n\n    if (is_listening === true) {\n      recognition.stop();\n      return;\n    }\n\n    recognition.start();\n  }\n\n  render() {\n    recognition.onresult = function (event) {\n      if (typeof event.results == 'undefined') {\n        recognition.onend = null;\n        recognition.stop();\n        return;\n      }\n\n      for (var i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          final_transcript += event.results[i][0].transcript;\n        }\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.speaking === true ? \"you are speaking...\" : \"Click button speak to speak\", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.startButton,\n        children: [\" \", this.state.speaking === true ? \"Stop\" : \"Speak\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: final_transcript\n      }, void 0, false)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Speechinput;","map":{"version":3,"sources":["C:/Users/shash/Desktop/tamil_dict/e-dict/src/speechinput.js"],"names":["React","Component","recognition","window","webkitSpeechRecognition","final_transcript","Speechinput","constructor","props","state","speaking","recognizing","startButton","bind","componentDidMount","setState","lang","continuous","interimResults","is_listening","stop","start","render","onresult","event","results","onend","i","resultIndex","length","isFinal","transcript"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,IAAIC,WAAW,GAAG,IAAIC,MAAM,CAACC,uBAAX,EAAlB;AACA,IAAIC,gBAAgB,GAAG,EAAvB;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAChCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAG,IADF;AAETC,MAAAA,WAAW,EAAE,IAFJ;AAGTT,MAAAA,WAAW,EAAG;AAHL,KAAb;AAKA,SAAKU,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB,CAPe,CAQf;AACH;;AAEsB,QAAjBC,iBAAiB,GAAG;AACtB,SAAKC,QAAL,CAAc;AAAC,kBAAW;AAAZ,KAAd;AACAb,IAAAA,WAAW,CAACc,IAAZ,GAAiB,OAAjB;AACAd,IAAAA,WAAW,CAACe,UAAZ,GAAwB,IAAxB;AACAf,IAAAA,WAAW,CAACgB,cAAZ,GAA2B,IAA3B;AACH;;AAEDN,EAAAA,WAAW,GAAG;AACV,UAAMO,YAAY,GAAG,KAAKV,KAAL,CAAWC,QAAhC;AACA,SAAKK,QAAL,CAAc;AAAC,kBAAW,CAACI;AAAb,KAAd;;AACA,QAAIA,YAAY,KAAM,IAAtB,EAA4B;AACxBjB,MAAAA,WAAW,CAACkB,IAAZ;AACA;AACH;;AACDlB,IAAAA,WAAW,CAACmB,KAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLpB,IAAAA,WAAW,CAACqB,QAAZ,GAAuB,UAASC,KAAT,EAAgB;AACnC,UAAI,OAAOA,KAAK,CAACC,OAAb,IAAyB,WAA7B,EAA0C;AACtCvB,QAAAA,WAAW,CAACwB,KAAZ,GAAoB,IAApB;AACAxB,QAAAA,WAAW,CAACkB,IAAZ;AACA;AACH;;AACD,WAAK,IAAIO,CAAC,GAAGH,KAAK,CAACI,WAAnB,EAAgCD,CAAC,GAAGH,KAAK,CAACC,OAAN,CAAcI,MAAlD,EAA0D,EAAEF,CAA5D,EAA+D;AAC3D,YAAIH,KAAK,CAACC,OAAN,CAAcE,CAAd,EAAiBG,OAArB,EAA8B;AAC1BzB,UAAAA,gBAAgB,IAAImB,KAAK,CAACC,OAAN,CAAcE,CAAd,EAAiB,CAAjB,EAAoBI,UAAxC;AACH;AACJ;AACJ,KAXD;;AAYA,wBACI;AAAA,iBACK,KAAKtB,KAAL,CAAWC,QAAX,KAAyB,IAAzB,GAAgC,qBAAhC,GAAwD,6BAD7D,eAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKE,WAApC;AAAA,wBAAmD,KAAKH,KAAL,CAAWC,QAAX,KAAwB,IAAxB,GAA+B,MAA/B,GAAwC,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBACKL;AADL,uBAHJ;AAAA,oBADJ;AASH;;AAnD+B;;AAqDpC,eAAeC,WAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nvar recognition = new window.webkitSpeechRecognition();\r\nvar final_transcript = '';\r\n\r\nclass Speechinput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            speaking : null,\r\n            recognizing: null,\r\n            recognition : null\r\n        }\r\n        this.startButton = this.startButton.bind(this);\r\n        //this.setConfign = this.setConfign.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({'speaking':false});\r\n        recognition.lang='ta-IN';\r\n        recognition.continuous =true;\r\n        recognition.interimResults=true;\r\n    }\r\n\r\n    startButton() {\r\n        const is_listening = this.state.speaking;\r\n        this.setState({'speaking':!is_listening});\r\n        if (is_listening ===  true) {\r\n            recognition.stop();\r\n            return;\r\n        }\r\n        recognition.start();\r\n    }\r\n\r\n    render() {\r\n        recognition.onresult = function(event) {\r\n            if (typeof(event.results) == 'undefined') {\r\n                recognition.onend = null;\r\n                recognition.stop();\r\n                return;\r\n            }\r\n            for (var i = event.resultIndex; i < event.results.length; ++i) {\r\n                if (event.results[i].isFinal) {\r\n                    final_transcript += event.results[i][0].transcript;\r\n                }\r\n            }\r\n        };\r\n        return(\r\n            <>\r\n                {this.state.speaking ===  true ? \"you are speaking...\" : \"Click button speak to speak\"}\r\n                <button type=\"button\" onClick={this.startButton}> {this.state.speaking === true ? \"Stop\" : \"Speak\"} </button>\r\n                <>\r\n                    {final_transcript}\r\n                </>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Speechinput;"]},"metadata":{},"sourceType":"module"}