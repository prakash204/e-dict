{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Desktop\\\\tamil_dict\\\\e-dict\\\\src\\\\home.js\";\nimport { Component } from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport W from './words.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Words = W.Words;\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = word => {\n      this.setState({\n        \"input\": word\n      });\n      console.log(\"word changed\", word);\n    };\n\n    this.onKeyPress = button => {\n      console.log(\"Button pressed\", button);\n      /**\r\n       * If you want to handle the shift and caps lock buttons\r\n       */\n\n      if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();else if (button === \"{enter}\") this.handleSubmit();\n    };\n\n    this.onChangeInput = event => {\n      const input = event.target.value;\n      const want_keyboard = this.state.want_keyboard;\n      console.log(input);\n      this.setState({\n        \"input\": input\n      });\n      if (want_keyboard) this.keyboard.setInput(input);\n    };\n\n    this.handleShift = () => {\n      const layoutName = this.state.layoutName;\n      this.setState({\n        layoutName: layoutName === \"default\" ? \"shift\" : \"default\"\n      });\n    };\n\n    this.playtext = text => {};\n\n    this.state = {\n      input: \"\",\n      audio_path: \"\",\n      word_found: null,\n      sentences: [],\n      want_keyboard: null,\n      layoutName: \"default\",\n      display: {\n        'a': '\\u2714:Validate (Shift+Enter)',\n        // check mark - same action as accept\n        'accept': 'accept (Shift+Enter)',\n        'alt': 'Alt:More Characters',\n        'b': '\\u2190:Backspace',\n        // Left arrow (same as &larr;)\n        'bksp': 'Bksp:Backspace',\n        'c': '\\u2716:Escape (Esc)',\n        // big X, close - same action as cancel\n        'cancel': 'Cancel (Esc)',\n        'clear': 'C:Clear',\n        // clear num pad\n        'combo': '\\u00f6:Toggle Combo Keys',\n        'dec': '.:Decimal point',\n        // decimal point for num pad (optional), change '.' to ',' for European format\n        'e': '\\u21b5:Enter',\n        // down, then left arrow - enter symbol\n        'enter': 'Enter:Enter',\n        'lock': '\\u21ea Lock:Caps Lock',\n        // caps lock\n        's': '\\u21e7:Shift',\n        // thick hollow up arrow\n        'shift': 'Shift:Shift',\n        'sign': '\\u00b1:Sign for num pad',\n        // +/- sign for num pad\n        'space': 'Space',\n        't': '\\u21e5:Tab',\n        // right arrow to bar (used since this virtual keyboard works with one directional tabs)\n        'tab': '\\u21e5 Tab:Tab'\n      },\n      layout: {\n        'default': [\n        /* ா\tி\tீ\tு\tூ\tெ\tே\tை\tொ\tோ\tௌ\tஃ  */\n        \"\\u0BBE \\u0BBF \\u0BC0 \\u0BC1 \\u0BC2 \\u0BC6 \\u0BC7 \\u0BC8 \\u0BCA \\u0BCB \\u0BCC \\u0B83 {bksp}\",\n        /*      ஆ     ஈ      ஊ     ஐ    ஏ      ள      ற     ன     ட      ண   ச      ஞ   \\   */\n        \"{tab} \\u0b86 \\u0b88 \\u0b8a \\u0b90 \\u0b8f \\u0bb3 \\u0bb1 \\u0ba9 \\u0b9f \\u0ba3 \\u0b9a \\u0b9e\",\n        /*  அ    இ      உ     ்       எ      க      ப    ம      த      ந      ய  */\n        \"\\u0b85 \\u0b87 \\u0b89 \\u0bcd \\u0b8e \\u0b95 \\u0baa \\u0bae \\u0ba4 \\u0ba8 \\u0baf {enter}\",\n        /*         ஔ    ஒ      ஓ    வ     ங     ல      ர    , . ழ    */\n        \"{shift} \\u0b94 \\u0b93 \\u0b92 \\u0bb5 \\u0b99 \\u0bb2 \\u0bb0 , . \\u0bb4 {shift}\", \"{accept} {alt} {space} {alt} {cancel}\"],\n        'shift': [\n        /* numeric key row */\n        \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\n        /* sanskrit row */\n\n        /*     ஸ      ஷ        ஜ      ஹ           ஶ்ரீ                       க்ஷ                       */\n        \"{tab} \\u0bb8 \\u0bb7 \\u0b9c \\u0bb9 \\u0bb6 \\u0bcd \\u0bb0 \\u0bc0 \\u0b95 \\u0bcd \\u0bb7 [ ] { }\",\n        /* ௹     ௺    ௸     ஃ  \\u0020 \\u0020 \\u0020 \\\" : ; \\' {enter} */\n        \"\\u0bf9 \\u0bfa \\u0bf8 \\u0b83 \\\" : ; ' {enter}\",\n        /* ௳ ௴ ௵ ௶ ௷ */\n        \"{shift} \\u0bf3 \\u0bf4 \\u0bf5 \\u0bf6 \\u0bf7 / {shift}\", \"{accept} {alt} {space} {alt} {cancel}\"]\n      }\n    };\n    this.searchword = this.searchword.bind(this);\n    this.togglevirtualkeyboard = this.togglevirtualkeyboard.bind(this);\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.resettextbox = this.resettextbox.bind(this); //this.handleChange = this.handleChange.bind(this);\n    //hdhjthis.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      \"input\": \"\",\n      \"want_keyboard\": false,\n      \"found\": false\n    });\n  }\n\n  searchword() {\n    var flag = false;\n    var i;\n    const keyword = this.state.input;\n    console.log(keyword);\n\n    for (i in Words) {\n      if (Words[i]['word'] === keyword) {\n        this.setState({\n          \"word_found\": true,\n          \"audio_path\": Words[i].audio,\n          \"sentences\": Words[i].sentences\n        });\n        flag = true;\n        break;\n      }\n    }\n\n    if (flag === false) {\n      this.setState({\n        \"word_found\": false\n      });\n    }\n\n    console.log(flag);\n  }\n\n  resettextbox() {\n    this.setState({\n      \"input\": \"\",\n      \"audio_path\": \"\",\n      \"sentences\": [],\n      \"word_found\": false\n    });\n  }\n\n  togglevirtualkeyboard() {\n    var flag = this.state.want_keyboard;\n\n    if (flag === true) {\n      flag = false;\n    } else {\n      flag = true;\n    }\n\n    this.setState({\n      \"want_keyboard\": flag\n    });\n  }\n\n  displaySentences() {\n    const sentences = this.state.sentences;\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sentences.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", item, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.input !== \"\" ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 46\n      }, this) : \"\", this.state.want_keyboard === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.input,\n          placeholder: \"Tap on the virtual keyboard to start\",\n          onChange: this.onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n          keyboardRef: r => this.keyboard = r,\n          layout: this.state.layout,\n          layoutName: this.state.layoutName,\n          display: this.state.display,\n          onChange: this.onChange,\n          disableButtonHold: \"false\",\n          onKeyPress: this.onKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.togglevirtualkeyboard,\n          children: \"Close Keyboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"enter a word\",\n          value: this.state.input,\n          onChange: this.onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.togglevirtualkeyboard,\n          children: \"View Keyboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.searchword,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.resettextbox,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), this.state.word_found === true ? this.displaySentences() : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/shash/Desktop/tamil_dict/e-dict/src/home.js"],"names":["Component","Keyboard","W","Words","Home","constructor","props","onChange","word","setState","console","log","onKeyPress","button","handleShift","handleSubmit","onChangeInput","event","input","target","value","want_keyboard","state","keyboard","setInput","layoutName","playtext","text","audio_path","word_found","sentences","display","layout","searchword","bind","togglevirtualkeyboard","resettextbox","componentDidMount","flag","i","keyword","audio","displaySentences","map","item","render","r"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport Keyboard from 'react-simple-keyboard';\r\nimport \"react-simple-keyboard/build/css/index.css\";\r\nimport W from './words.json';\r\n\r\nconst Words = W.Words; \r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            audio_path:\"\",\r\n            word_found:null,\r\n            sentences:[],\r\n            want_keyboard : null,\r\n            layoutName: \"default\",\r\n            display : {\r\n                'a': '\\u2714:Validate (Shift+Enter)', // check mark - same action as accept\r\n                'accept': 'accept (Shift+Enter)',\r\n                'alt': 'Alt:More Characters',\r\n                'b': '\\u2190:Backspace',    // Left arrow (same as &larr;)\r\n                'bksp': 'Bksp:Backspace',\r\n                'c': '\\u2716:Escape (Esc)', // big X, close - same action as cancel\r\n                'cancel': 'Cancel (Esc)',\r\n                'clear': 'C:Clear',             // clear num pad\r\n                'combo': '\\u00f6:Toggle Combo Keys',\r\n                'dec': '.:Decimal point',           // decimal point for num pad (optional), change '.' to ',' for European format\r\n                'e': '\\u21b5:Enter',        // down, then left arrow - enter symbol\r\n                'enter': 'Enter:Enter',\r\n                'lock': '\\u21ea Lock:Caps Lock', // caps lock\r\n                's': '\\u21e7:Shift',        // thick hollow up arrow\r\n                'shift': 'Shift:Shift',\r\n                'sign': '\\u00b1:Sign for num pad',  // +/- sign for num pad\r\n                'space': 'Space',\r\n                't': '\\u21e5:Tab',          // right arrow to bar (used since this virtual keyboard works with one directional tabs)\r\n                'tab': '\\u21e5 Tab:Tab'\r\n                },\r\n            layout : {\r\n                'default': [\r\n                  /* ா\tி\tீ\tு\tூ\tெ\tே\tை\tொ\tோ\tௌ\tஃ  */\r\n                  \"\\u0BBE \\u0BBF \\u0BC0 \\u0BC1 \\u0BC2 \\u0BC6 \\u0BC7 \\u0BC8 \\u0BCA \\u0BCB \\u0BCC \\u0B83 {bksp}\",\r\n                  /*      ஆ     ஈ      ஊ     ஐ    ஏ      ள      ற     ன     ட      ண   ச      ஞ   \\   */\r\n                  \"{tab} \\u0b86 \\u0b88 \\u0b8a \\u0b90 \\u0b8f \\u0bb3 \\u0bb1 \\u0ba9 \\u0b9f \\u0ba3 \\u0b9a \\u0b9e\",\r\n                  /*  அ    இ      உ     ்       எ      க      ப    ம      த      ந      ய  */\r\n                  \"\\u0b85 \\u0b87 \\u0b89 \\u0bcd \\u0b8e \\u0b95 \\u0baa \\u0bae \\u0ba4 \\u0ba8 \\u0baf {enter}\",\r\n                  /*         ஔ    ஒ      ஓ    வ     ங     ல      ர    , . ழ    */\r\n                  \"{shift} \\u0b94 \\u0b93 \\u0b92 \\u0bb5 \\u0b99 \\u0bb2 \\u0bb0 , . \\u0bb4 {shift}\",\r\n                  \"{accept} {alt} {space} {alt} {cancel}\"\r\n                ],\r\n                'shift': [\r\n                    /* numeric key row */\r\n                    \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n                    /* sanskrit row */\r\n                    /*     ஸ      ஷ        ஜ      ஹ           ஶ்ரீ                       க்ஷ                       */\r\n                    \"{tab} \\u0bb8 \\u0bb7 \\u0b9c \\u0bb9 \\u0bb6 \\u0bcd \\u0bb0 \\u0bc0 \\u0b95 \\u0bcd \\u0bb7 [ ] { }\",\r\n                    /* ௹     ௺    ௸     ஃ  \\u0020 \\u0020 \\u0020 \\\" : ; \\' {enter} */\r\n                    \"\\u0bf9 \\u0bfa \\u0bf8 \\u0b83 \\\" : ; ' {enter}\",\r\n                    /* ௳ ௴ ௵ ௶ ௷ */\r\n                    \"{shift} \\u0bf3 \\u0bf4 \\u0bf5 \\u0bf6 \\u0bf7 / {shift}\",\r\n                    \"{accept} {alt} {space} {alt} {cancel}\"\r\n                ]\r\n            }\r\n        }\r\n        this.searchword= this.searchword.bind(this);\r\n        this.togglevirtualkeyboard= this.togglevirtualkeyboard.bind(this);\r\n        this.onChangeInput= this.onChangeInput.bind(this);\r\n        this.resettextbox= this.resettextbox.bind(this);\r\n        //this.handleChange = this.handleChange.bind(this);\r\n        //hdhjthis.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\"input\":\"\",\"want_keyboard\":false,\"found\":false});\r\n    }\r\n\r\n    onChange = word => {\r\n        this.setState({ \"input\":word });\r\n        console.log(\"word changed\", word);\r\n    };\r\n    \r\n    onKeyPress = button => {\r\n    console.log(\"Button pressed\", button);\r\n\r\n    /**\r\n     * If you want to handle the shift and caps lock buttons\r\n     */\r\n    if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\r\n    else if (button === \"{enter}\") this.handleSubmit();\r\n    };\r\n\r\n    onChangeInput = event => {\r\n        const input = event.target.value;\r\n        const want_keyboard = this.state.want_keyboard;\r\n        console.log(input);\r\n        this.setState({ \"input\":input });\r\n        if (want_keyboard) this.keyboard.setInput(input);\r\n    };\r\n\r\n    handleShift = () => {\r\n        const layoutName = this.state.layoutName;\r\n    \r\n        this.setState({\r\n          layoutName: layoutName === \"default\" ? \"shift\" : \"default\"\r\n        });\r\n      };\r\n\r\n    searchword() {\r\n        var flag = false;\r\n        var i;\r\n        const keyword = this.state.input;\r\n        console.log(keyword);\r\n        for (i in Words){\r\n            if (Words[i]['word'] === keyword) {\r\n                this.setState({\"word_found\":true,\"audio_path\":Words[i].audio,\"sentences\":Words[i].sentences});\r\n                flag = true;\r\n                break;\r\n            }\r\n        }\r\n        if (flag === false) {\r\n            this.setState({\"word_found\":false});\r\n        }\r\n        console.log(flag);\r\n\r\n    }\r\n\r\n    resettextbox() {\r\n        this.setState({\"input\":\"\",\"audio_path\":\"\",\"sentences\":[],\"word_found\":false});\r\n    }\r\n\r\n    togglevirtualkeyboard(){\r\n        var flag = this.state.want_keyboard;\r\n        if (flag === true) {\r\n            flag = false;\r\n        } else {\r\n            flag = true;\r\n        }\r\n        this.setState({\"want_keyboard\":flag});\r\n    }\r\n    \r\n    playtext = (text) => {\r\n\r\n    }\r\n\r\n    displaySentences() {\r\n        const sentences = this.state.sentences;\r\n        return (\r\n            <ul>\r\n            {sentences.map((item) => (\r\n                <li> {item} </li>\r\n            ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                \r\n                { this.state.input !== \"\"  ? <h1>{this.state.input}</h1> : \"\" }\r\n                {this.state.want_keyboard === true ? \r\n                <div>\r\n                    <input\r\n                        value={this.state.input}\r\n                        placeholder={\"Tap on the virtual keyboard to start\"}\r\n                        onChange={this.onChangeInput}\r\n                    />\r\n                    <Keyboard\r\n                        keyboardRef={r => (this.keyboard = r)}\r\n                        layout={this.state.layout}\r\n                        layoutName={this.state.layoutName}\r\n                        display={this.state.display}\r\n                        onChange={this.onChange}\r\n                        disableButtonHold = \"false\"\r\n                        onKeyPress={this.onKeyPress}\r\n                    />\r\n                    <button type=\"button\" onClick={this.togglevirtualkeyboard}>Close Keyboard</button>\r\n                    </div>\r\n\r\n                    : <>\r\n                        <input type=\"text\" placeholder=\"enter a word\" value={this.state.input} onChange={this.onChangeInput}></input>\r\n                        <button type=\"button\" onClick={this.togglevirtualkeyboard}>View Keyboard</button>\r\n                        </>\r\n                    }\r\n                <button type=\"button\" onClick={this.searchword}>Search</button>\r\n                <button type=\"button\" onClick={this.resettextbox}>Reset</button>\r\n                \r\n                {this.state.word_found === true ? this.displaySentences() : \"\" }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}